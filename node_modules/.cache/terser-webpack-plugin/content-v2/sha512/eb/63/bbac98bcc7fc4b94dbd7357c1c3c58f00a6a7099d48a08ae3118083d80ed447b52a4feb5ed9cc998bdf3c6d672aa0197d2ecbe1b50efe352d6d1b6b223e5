{"map":"{\"version\":3,\"sources\":[\"/Users/apple/dy-design/src/routes/FormItem/index.js\"],\"names\":[\"_react\",\"__webpack_require__\",\"_dy\",\"React\",\"Component\",\"[object Object]\",\"args\",\"_temp\",\"super\",\"this\",\"state\",\"username\",\"password\",\"Copy\",\"className\",\"Url2\",\"document\",\"querySelector\",\"innerText\",\"oInput\",\"createElement\",\"value\",\"body\",\"appendChild\",\"select\",\"execCommand\",\"alert\",\"render\",\"_state\",\"_react2\",\"default\",\"Fragment\",\"style\",\"fontSize\",\"padding\",\"marginBottom\",\"background\",\"DyFormItem\",\"onChange\",\"setState\",\"formLayout\",\"x\",\"y\",\"color\",\"labelStyle\",\"label\",\"type\",\"margin\",\"suffix\",\"DyIcon\",\"onClick\",\"dangerouslySetInnerHTML\",\"__html\",\"toShow\"],\"mappings\":\"oLAAA,MAAAA,EAAAC,EAAA,4CACAA,EAAA,QACA,IAAAC,EAAAD,EAAA,kBAEe,cAAuBE,EAAAA,QAAMC,UAAUC,eAAAC,GAAA,IAAAC,EAAA,OAAAA,EAAAC,SAAAF,GAAAG,KACpDC,MAAQ,CACNC,SAAU,GACVC,SAAU,IAHwCH,KAKpDI,KAAOC,CAAAA,IACL,IAAIC,EAAOC,SAASC,cAAcH,GAAWI,UAEzCC,EAASH,SAASI,cAAc,YACpCD,EAAOE,MAAQN,EACfC,SAASM,KAAKC,YAAYJ,GAC1BA,EAAOK,SACPR,SAASS,YAAY,QACrBC,MAAM,UAb4CnB,EAgBpDoB,SAAS,IAAAC,EACwBnB,KAAKC,MAD7B,MACCC,EADDiB,EACCjB,SAAUC,EADXgB,EACWhB,SAClB,OACEiB,EAAAC,QAAAV,cAACS,EAAAC,QAAMC,SAAP,KACEF,EAAAC,QAAAV,cAAA,MAAA,CACEY,MAAO,CACLC,SAAU,OACVC,QAAS,OACTC,aAAc,OACdC,WAAY,SAGdP,EAAAC,QAAAV,cAAA,MAAA,CACEY,MAAO,CACLG,aAAc,SAFlB,eAOAN,EAAAC,QAAAV,cAAClB,EAAAmC,WAAD,CACEC,SAAUjB,IACRZ,KAAK8B,SAAS,CAAE5B,SAAUU,KAc5BP,UAAU,WACV0B,WAAY,CAAEC,EAAG,EAAGC,EAAG,GACvBhC,MAAM,UACNsB,MAAO,CAAEW,MAAO,QAChBC,WAAY,CAAED,MAAO,QACrBtB,MAAOV,EACPkC,MAAM,QAERhB,EAAAC,QAAAV,cAAClB,EAAAmC,WAAD,CACES,KAAK,WACLd,MAAO,CAAEW,MAAO,QAChBC,WAAY,CAAED,MAAO,QACrBL,SAAUjB,IACRZ,KAAK8B,SAAS,CAAE3B,SAAUS,KAE5BP,UAAU,WACV0B,WAAY,CAAEC,EAAG,EAAGC,EAAG,GACvBrB,MAAOT,EACPF,MAAM,QACNmC,MAAM,QAERhB,EAAAC,QAAAV,cAAA,MAAA,CAAKY,MAAO,CAAEe,OAAQ,aAAtB,WACAlB,EAAAC,QAAAV,cAAClB,EAAAmC,WAAD,CACEL,MAAO,CAAEW,MAAO,QAChBC,WAAY,CAAED,MAAO,QACrBL,SAAUjB,MACVP,UAAU,WACVkC,OACEnB,EAAAC,QAAAV,cAAClB,EAAA+C,OAAD,CACEC,QAAS,KACPxB,MAAM,IAERoB,KAAK,wBAIXjB,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,aACbe,EAAAC,QAAAV,cAAA,MAAA,CACEN,UAAU,OACVqC,wBAAyB,CACvBC,OAAQC,OAAQ,iuEAiFpBxB,EAAAC,QAAAV,cAAA,SAAA,CAAQ8B,QAAS,IAAMzC,KAAKI,KAAK,UAAjC,QAIJgB,EAAAC,QAAAV,cAAA,MAAA,CAAKY,MAAO,CAAEe,OAAQ,SAAtB,SACAlB,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,QAAf,0BACAe,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,QAAf,qDAGAe,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,QAAf,6BACAe,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,QAAf,iCACAe,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,QAAf,6BACAe,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,QAAf,qCACAe,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,QAAf,6BACAe,EAAAC,QAAAV,cAAA,MAAA,CAAKN,UAAU,QAAf,8DAEO\",\"sourcesContent\":[\"import React, { Fragment } from \\\"react\\\";\\nimport \\\"./index.less\\\";\\nimport { DyFormItem, DyIcon } from \\\"../../dy.design\\\";\\nlet throtter = null;\\nexport default class FormItem extends React.Component {\\n  state = {\\n    username: \\\"\\\",\\n    password: \\\"\\\"\\n  };\\n  Copy = className => {\\n    var Url2 = document.querySelector(className).innerText;\\n\\n    var oInput = document.createElement(\\\"textarea\\\");\\n    oInput.value = Url2;\\n    document.body.appendChild(oInput);\\n    oInput.select(); // 选择对象\\n    document.execCommand(\\\"Copy\\\"); // 执行浏览器复制命令\\n    alert(\\\"复制成功\\\");\\n  };\\n\\n  render() {\\n    const { username, password } = this.state;\\n    return (\\n      <React.Fragment>\\n        <div\\n          style={{\\n            fontSize: \\\"16px\\\",\\n            padding: \\\"30px\\\",\\n            marginBottom: \\\"10px\\\",\\n            background: \\\"#fff\\\"\\n          }}\\n        >\\n          <div\\n            style={{\\n              marginBottom: \\\"30px\\\"\\n            }}\\n          >\\n            FormItem用法：\\n          </div>\\n          <DyFormItem\\n            onChange={value => {\\n              this.setState({ username: value });\\n              // 实时输入验证的 请使用以下代码进行节流\\n              //   if (throtter) {\\n              //     clearTimeout(throtter);\\n              //   }\\n              //   if (value) {\\n              //     throtter = setTimeout(() => {\\n              //       //   this.verifyName(value);\\n              //       clearTimeout(throtter);\\n              //     }, 1000);\\n              //   } else {\\n              //     // this.setState({ verify: null });\\n              //   }\\n            }}\\n            className=\\\"username\\\"\\n            formLayout={{ x: 1, y: 4 }}\\n            state=\\\"success\\\"\\n            style={{ color: \\\"#fff\\\" }}\\n            labelStyle={{ color: \\\"#fff\\\" }}\\n            value={username}\\n            label=\\\"账户：\\\"\\n          />\\n          <DyFormItem\\n            type=\\\"password\\\"\\n            style={{ color: \\\"#fff\\\" }}\\n            labelStyle={{ color: \\\"#fff\\\" }}\\n            onChange={value => {\\n              this.setState({ password: value });\\n            }}\\n            className=\\\"password\\\"\\n            formLayout={{ x: 1, y: 4 }}\\n            value={password}\\n            state=\\\"error\\\"\\n            label=\\\"密码：\\\"\\n          />\\n          <div style={{ margin: \\\"30px 0px\\\" }}>普通的输入框：</div>\\n          <DyFormItem\\n            style={{ color: \\\"#fff\\\" }}\\n            labelStyle={{ color: \\\"#fff\\\" }}\\n            onChange={value => {}}\\n            className=\\\"password\\\"\\n            suffix={\\n              <DyIcon\\n                onClick={() => {\\n                  alert(1);\\n                }}\\n                type=\\\"dy-guanfangbanben\\\"\\n              />\\n            }\\n          />\\n          <div className=\\\"codePlace\\\">\\n            <pre\\n              className=\\\"pre1\\\"\\n              dangerouslySetInnerHTML={{\\n                __html: toShow(`\\n    import React from 'react';\\n    import ReactDOM from 'react-dom';\\n    import { DyFormItem } from \\\"../../dy.design\\\";\\n\\n\\n    class FormItem extends React.PureComponent {\\n\\n        state = {\\n            username: \\\"\\\",\\n            password: \\\"\\\"\\n          };\\n\\n\\n        render(){\\n            const { username, password } = this.state;\\n        return    \\n          <Fragment>\\n            <DyFormItem\\n             onChange={value => {\\n                this.setState({ username: value });\\n                // 实时输入验证的 请使用以下代码进行节流\\n                //   if (throtter) {\\n                //     clearTimeout(throtter);\\n                //   }\\n                //   if (value) {\\n                //     throtter = setTimeout(() => {\\n                //       //   this.verifyName(value);\\n                //       clearTimeout(throtter);\\n                //     }, 1000);\\n                //   } else {\\n                //     // this.setState({ verify: null });\\n                //   }\\n                }}\\n                className=\\\"username\\\"\\n                formLayout={{ x: 1, y: 4 }}\\n                state=\\\"success\\\"\\n                style={{ color: \\\"#fff\\\" }}\\n                labelStyle={{ color: \\\"#fff\\\" }}\\n                value={username}\\n                label=\\\"账户：\\\"\\n            />\\n\\n            <DyFormItem\\n                type=\\\"password\\\"\\n                style={{ color: \\\"#fff\\\" }}\\n                labelStyle={{ color: \\\"#fff\\\" }}\\n                onChange={value => {\\n                    this.setState({ password: value });\\n                }}\\n                className=\\\"password\\\"\\n                formLayout={{ x: 1, y: 4 }}\\n                value={password}\\n                state=\\\"error\\\"\\n                label=\\\"密码：\\\"\\n            />\\n\\n            <DyFormItem\\n                style={{ color: \\\"#fff\\\" }}\\n                labelStyle={{ color: \\\"#fff\\\" }}\\n                onChange={value => {}}\\n                className=\\\"password\\\"\\n                suffix={<DyIcon type=\\\"dy-guanfangbanben\\\" />}\\n            />\\n          </Fragment>\\n        }\\n    }\\n\\n    ReactDOM.render(<FormItem />, DomNode);\\n\\n    style: \\n    .username,\\n    .password {\\n        padding: 30px;\\n        background: #ccc;\\n        color: #fff;\\n    }\\n\\n            `)\\n              }}\\n            />\\n            <button onClick={() => this.Copy(\\\".pre1\\\")}>复制</button>\\n          </div>\\n        </div>\\n\\n        <div style={{ margin: \\\"10px\\\" }}>参数说明：</div>\\n        <div className=\\\"desc\\\">onChange: 输入框的change事件</div>\\n        <div className=\\\"desc\\\">\\n          className: 控制整个容器的样式 不包括label和input的样式 类型： string\\n        </div>\\n        <div className=\\\"desc\\\">style: input的样式 类型：object{}</div>\\n        <div className=\\\"desc\\\">labelStyle: label的样式 类型object{}</div>\\n        <div className=\\\"desc\\\">label: 左侧lable 类型： string</div>\\n        <div className=\\\"desc\\\">state: success | error 类型： string</div>\\n        <div className=\\\"desc\\\">suffix: 末尾显示的额外元素 类型： any</div>\\n        <div className=\\\"desc\\\">\\n          formLayout: label与input的flex宽度比例 x为label的比例， y为input的比例\\n          类型：{`{x: number, y: number}`}\\n        </div>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{bjis:function(e,t){},\"e+nS\":function(e,t,a){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=void 0;var n,l=a(\"q1tI\"),s=(n=l)&&n.__esModule?n:{default:n};a(\"bjis\");var r=a(\"8C91\");t.default=class extends s.default.Component{constructor(...e){var t;return t=super(...e),this.state={username:\"\",password:\"\"},this.Copy=(e=>{var t=document.querySelector(e).innerText,a=document.createElement(\"textarea\");a.value=t,document.body.appendChild(a),a.select(),document.execCommand(\"Copy\"),alert(\"复制成功\")}),t}render(){var e=this.state;const t=e.username,a=e.password;return s.default.createElement(s.default.Fragment,null,s.default.createElement(\"div\",{style:{fontSize:\"16px\",padding:\"30px\",marginBottom:\"10px\",background:\"#fff\"}},s.default.createElement(\"div\",{style:{marginBottom:\"30px\"}},\"FormItem用法：\"),s.default.createElement(r.DyFormItem,{onChange:e=>{this.setState({username:e})},className:\"username\",formLayout:{x:1,y:4},state:\"success\",style:{color:\"#fff\"},labelStyle:{color:\"#fff\"},value:t,label:\"账户：\"}),s.default.createElement(r.DyFormItem,{type:\"password\",style:{color:\"#fff\"},labelStyle:{color:\"#fff\"},onChange:e=>{this.setState({password:e})},className:\"password\",formLayout:{x:1,y:4},value:a,state:\"error\",label:\"密码：\"}),s.default.createElement(\"div\",{style:{margin:\"30px 0px\"}},\"普通的输入框：\"),s.default.createElement(r.DyFormItem,{style:{color:\"#fff\"},labelStyle:{color:\"#fff\"},onChange:e=>{},className:\"password\",suffix:s.default.createElement(r.DyIcon,{onClick:()=>{alert(1)},type:\"dy-guanfangbanben\"})}),s.default.createElement(\"div\",{className:\"codePlace\"},s.default.createElement(\"pre\",{className:\"pre1\",dangerouslySetInnerHTML:{__html:toShow('\\n    import React from \\'react\\';\\n    import ReactDOM from \\'react-dom\\';\\n    import { DyFormItem } from \"../../dy.design\";\\n\\n\\n    class FormItem extends React.PureComponent {\\n\\n        state = {\\n            username: \"\",\\n            password: \"\"\\n          };\\n\\n\\n        render(){\\n            const { username, password } = this.state;\\n        return    \\n          <Fragment>\\n            <DyFormItem\\n             onChange={value => {\\n                this.setState({ username: value });\\n                // 实时输入验证的 请使用以下代码进行节流\\n                //   if (throtter) {\\n                //     clearTimeout(throtter);\\n                //   }\\n                //   if (value) {\\n                //     throtter = setTimeout(() => {\\n                //       //   this.verifyName(value);\\n                //       clearTimeout(throtter);\\n                //     }, 1000);\\n                //   } else {\\n                //     // this.setState({ verify: null });\\n                //   }\\n                }}\\n                className=\"username\"\\n                formLayout={{ x: 1, y: 4 }}\\n                state=\"success\"\\n                style={{ color: \"#fff\" }}\\n                labelStyle={{ color: \"#fff\" }}\\n                value={username}\\n                label=\"账户：\"\\n            />\\n\\n            <DyFormItem\\n                type=\"password\"\\n                style={{ color: \"#fff\" }}\\n                labelStyle={{ color: \"#fff\" }}\\n                onChange={value => {\\n                    this.setState({ password: value });\\n                }}\\n                className=\"password\"\\n                formLayout={{ x: 1, y: 4 }}\\n                value={password}\\n                state=\"error\"\\n                label=\"密码：\"\\n            />\\n\\n            <DyFormItem\\n                style={{ color: \"#fff\" }}\\n                labelStyle={{ color: \"#fff\" }}\\n                onChange={value => {}}\\n                className=\"password\"\\n                suffix={<DyIcon type=\"dy-guanfangbanben\" />}\\n            />\\n          </Fragment>\\n        }\\n    }\\n\\n    ReactDOM.render(<FormItem />, DomNode);\\n\\n    style: \\n    .username,\\n    .password {\\n        padding: 30px;\\n        background: #ccc;\\n        color: #fff;\\n    }\\n\\n            ')}}),s.default.createElement(\"button\",{onClick:()=>this.Copy(\".pre1\")},\"复制\"))),s.default.createElement(\"div\",{style:{margin:\"10px\"}},\"参数说明：\"),s.default.createElement(\"div\",{className:\"desc\"},\"onChange: 输入框的change事件\"),s.default.createElement(\"div\",{className:\"desc\"},\"className: 控制整个容器的样式 不包括label和input的样式 类型： string\"),s.default.createElement(\"div\",{className:\"desc\"},\"style: input的样式 类型：object\"),s.default.createElement(\"div\",{className:\"desc\"},\"labelStyle: label的样式 类型object\"),s.default.createElement(\"div\",{className:\"desc\"},\"label: 左侧lable 类型： string\"),s.default.createElement(\"div\",{className:\"desc\"},\"state: success | error 类型： string\"),s.default.createElement(\"div\",{className:\"desc\"},\"suffix: 末尾显示的额外元素 类型： any\"),s.default.createElement(\"div\",{className:\"desc\"},\"formLayout: label与input的flex宽度比例 x为label的比例， y为input的比例 类型：\",\"{x: number, y: number}\"))}}}}]);","extractedComments":[]}